{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAChCC,EAAW,GAmCjB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EAEFF,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA7CbN,EAAOc,iBAAiB,SAGxB,SAA0BC,GACxBZ,EAASY,EAAIC,OAAOC,MAAQC,OAAOH,EAAIC,OAAOG,M,IAHhDnB,EAAOc,iBAAiB,UAMxB,SAA0BC,GACxBA,EAAIK,iBAEJ,IACEC,UAAYf,MAAAgB,EAAKC,KAAEA,EAAIC,OAAEA,IACvBT,EAAIU,cACR,GAAIH,EAAMH,MAAQ,GAAKI,EAAKJ,MAAQ,GAAKK,EAAOL,OAAQ,EAEtD,YADAO,EAAA5B,GAAS6B,OAAOC,KAAK,sCAItBN,EAAQnB,EAASG,MAElB,IAAK,IAAIuB,EAAW,EAAGA,GAAY1B,EAASqB,OAAQK,GAAY,EAC9DzB,EAAcyB,EAAUP,GACrBQ,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,MACjBoB,EAAA5B,GAAS6B,OAAOI,QAAQ,qBAAqB1B,QAAeC,MAAU,IAEvE0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBoB,EAAA5B,GAAS6B,OAAOM,QAAQ,oBAAoB5B,QAAeC,MAAU,IAEzEgB,GAASnB,EAASoB,I","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst formData = {};\n\nformEl.addEventListener('input', handleFormInputs);\nformEl.addEventListener('submit', handleFormSubmit);\n\nfunction handleFormInputs(evt) {\n  formData[evt.target.name] = Number(evt.target.value);\n}\n\nfunction handleFormSubmit(evt) {\n  evt.preventDefault();\n\n  let {\n    elements: { delay, step, amount },\n  } = evt.currentTarget;\n  if (delay.value < 0 || step.value < 0 || amount.value <=0) {\n    Notiflix.Notify.info('Please fill with positive numbers!');\n    return\n  }\n\n   delay = formData.delay;\n\n  for (let position = 1; position <= formData.amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += formData.step;\n  }\n  \n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$formData","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","target","name","Number","value","preventDefault","elements","delay1","step","amount","currentTarget","$parcel$interopDefault","Notify","info","position1","then","success","catch","failure"],"version":3,"file":"03-promises.c7e65be1.js.map"}