{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAChCC,EAAW,GAmCjB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA7CPN,EAAOc,iBAAiB,SAGxB,SAA0BC,GACxBZ,EAASY,EAAIC,OAAOC,MAAQC,OAAOH,EAAIC,OAAOG,M,IAHhDnB,EAAOc,iBAAiB,UAMxB,SAA0BC,GACxBA,EAAIK,iBAEJ,IAEqBC,EAAjBN,EAAIO,cADNC,SAAYC,EAAKH,EAALf,MAAOmB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAE3B,GAAIF,EAAML,MAAQ,GAAKM,EAAKN,MAAQ,GAAKO,EAAOP,OAAQ,EAEtD,YADAQ,EAAA7B,GAAS8B,OAAOC,KAAK,sCAItBL,EAAQrB,EAASG,MAElB,IAAK,IAAIwB,EAAW,EAAGA,GAAY3B,EAASuB,OAAQI,GAAY,EAC9D1B,EAAc0B,EAAUN,GACrBO,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MACjBqB,EAAA7B,GAAS8B,OAAOK,QAAQ,qBAAoCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAEnE6B,OAAM,SAAAH,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAClBqB,EAAA7B,GAAS8B,OAAOQ,QAAQ,oBAAmCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAErEkB,GAASrB,EAASsB,I","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst formData = {};\n\nformEl.addEventListener('input', handleFormInputs);\nformEl.addEventListener('submit', handleFormSubmit);\n\nfunction handleFormInputs(evt) {\n  formData[evt.target.name] = Number(evt.target.value);\n}\n\nfunction handleFormSubmit(evt) {\n  evt.preventDefault();\n\n  let {\n    elements: { delay, step, amount },\n  } = evt.currentTarget;\n  if (delay.value < 0 || step.value < 0 || amount.value <=0) {\n    Notiflix.Notify.info('Please fill with positive numbers!');\n    return\n  }\n\n   delay = formData.delay;\n\n  for (let position = 1; position <= formData.amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += formData.step;\n  }\n  \n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$formData","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","target","name","Number","value","preventDefault","_elements","currentTarget","elements","delay1","step","amount","$parcel$interopDefault","Notify","info","position1","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.2796117c.js.map"}